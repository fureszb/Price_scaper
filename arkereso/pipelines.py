# arkereso/pipelines.py ‚Äî EGYES√çTETT EXCEL + "NINCS TAL√ÅLAT" + AI FALLBACK
# =============================================================================
# ‚úÖ √öJDONS√ÅGOK / V√ÅLTOZ√ÅSOK:
#   - Egyetlen Excel f√°jl k√©sz√ºl: output_ARKERESO_{timestamp}.xlsx
#   - Minden input √ó √°ruh√°z kombin√°ci√≥ legal√°bb egy sor (ha nincs tal√°lat: "NINCS_TALALAT")
#   - AI valid√°ci√≥ ON marad; ha Ollama nem el√©rhet≈ë ‚Üí gyors FALLBACK √©rt√©kek:
#       AI_Validacio="HIBA", AI_Pontszam=0, AI_Indoklas="AI nem el√©rhet≈ë (fallback)", AI_Statusz="AI_hiba"
#   - Stabilabb √©s gyorsabb Ollama h√≠v√°s (alap√©rtelmezett retries=1, timeout=20s)
#   - R√©szletesebb logok, √°tl√°that√≥ kommentek (# ‚úÖ √öJDONS√ÅG, # üîÑ M√ìDOS√çTOTT)
# =============================================================================

import json
import time
import requests
import pandas as pd
from scrapy.exceptions import DropItem
import logging
from scrapy import signals
import os
import datetime

# üîÑ M√ìDOS√çTOTT: Ollama be√°ll√≠t√°sok ‚Äì gyors√≠t√°s √©s stabilit√°s
OLLAMA_URL = "http://localhost:11434/api/generate"
MODEL_NAME = "llama3.1"

# ‚úÖ √öJDONS√ÅG: Gyorsabb default √©rt√©kek (cs√∂kkentett timeout/retries a teljes fut√°s gyors√≠t√°s√°hoz)
DEFAULT_RETRIES = 1
DEFAULT_TIMEOUT = 20  # m√°sodperc


def _ask_ollama(prompt: str, model: str = MODEL_NAME, retries: int = DEFAULT_RETRIES, timeout: int = DEFAULT_TIMEOUT) -> str:
    """Egyszer≈± h√≠v√≥ Ollam√°hoz (stream off). Visszaadja a teljes sz√∂veges v√°laszt.
    Ha nem el√©rhet≈ë, kiv√©telt dob, amit a pipeline fallback-k√©nt kezel."""
    payload = {
        "model": model,
        "prompt": prompt,
        "stream": False,
        "options": {"temperature": 0.1, "top_p": 0.9}
    }
    last_err = None
    for attempt in range(retries + 1):
        try:
            r = requests.post(OLLAMA_URL, json=payload, timeout=timeout)
            r.raise_for_status()
            data = r.json()
            return data.get("response", "").strip()
        except Exception as e:
            last_err = e
            logging.warning(f"Ollama h√≠v√°s sikertelen ({attempt + 1}/{retries + 1}): {e}")
            time.sleep(1.2)

    # Sikertelen h√≠v√°s eset√©n sz√°nd√©kosan kiv√©tel ‚Äì ezt a h√≠v√≥ fallback-kel kezeli
    raise Exception(f"Ollama nem el√©rhet≈ë: {last_err}")


def _build_prompt(input_term: str, scraped_name: str, price: str, store: str) -> str:
    return f"""
Feladat: D√∂ntsd el, hogy a TAL√ÅLAT megfelel-e az INPUT term√©kre.
V√°laszolj egyetlen JSON objektummal, pontos kulcsokkal:

{{
  "relevans": "IGEN" vagy "NEM",
  "pontszam": 0..100 (eg√©sz),
  "indoklas": "r√∂vid magyar indokl√°s, max 1-2 mondat"
}}

D√∂nt√©si szempontok:
- A n√©vben egyez≈ë kulcskifejez√©sek (m√©ret, t√≠pus, menet/E27/E14, anyag, darabsz√°m).
- Ha nagyon √°ltal√°nos a tal√°lat, akkor NEM.
- Ha er≈ës egyez√©s (azonos szabv√°ny, jel√∂l√©s), akkor IGEN.

INPUT_TERM: "{input_term}"
TALALAT_NEV: "{scraped_name}"
AR: "{price} Ft"
ARUHAZ: "{store}"
""".strip()


class AIValidationPipeline:
    """AI valid√°ci√≥ Ollam√°val (ON) + fallback, ha a modell nem el√©rhet≈ë."""

    def __init__(self):
        self.logger = logging.getLogger(__name__)

    def process_item(self, item, spider):
        if not getattr(spider, 'enable_ai_validation', True):
            # AI kikapcsolt m√≥dban is egys√©ges mez≈ëk
            item["AI_Validacio"] = "KIKAPCSOLVA"
            item["AI_Pontszam"] = 0
            item["AI_Indoklas"] = "AI valid√°ci√≥ nincs enged√©lyezve"
            item["AI_Statusz"] = "AI_kikapcsolva"
            return item

        termek = item.get("termek", "")
        nev = item.get("nev", "")
        ar = item.get("ar", "")
        aruhaz = item.get("aruhaz", "")

        # Adatmin≈ës√©g ellen≈ërz√©s
        if not all([termek, nev]):
            item["AI_Validacio"] = "HIBA"
            item["AI_Pontszam"] = 0
            item["AI_Indoklas"] = "Hi√°nyz√≥ adat (termek vagy nev √ºres)"
            item["AI_Statusz"] = "AI_hiba"
            return item

        try:
            prompt = _build_prompt(termek, nev, ar, aruhaz)
            resp = _ask_ollama(prompt)

            relevans = "NEM"
            pontszam = 0
            indok = "N/A"

            try:
                # JSON r√©sz kimetsz√©se laza LLM v√°laszb√≥l
                start_idx = resp.find('{')
                end_idx = resp.rfind('}') + 1
                if start_idx != -1 and end_idx != 0:
                    json_str = resp[start_idx:end_idx]
                    data = json.loads(json_str)
                    relevans = str(data.get("relevans", "NEM")).strip().upper()
                    pontszam = int(data.get("pontszam", 0))
                    indok = str(data.get("indoklas", "")).strip()
                else:
                    # Ha nincs j√≥l form√°zott JSON, pr√≥b√°ljuk meg heur. m√≥don
                    if "IGEN" in resp.upper():
                        relevans = "IGEN"
                        pontszam = 80
                        indok = "Automatikus elfogad√°s JSON hi√°ny√°ban"
                    else:
                        relevans = "NEM"
                        pontszam = 30
                        indok = "Automatikus elutas√≠t√°s JSON hi√°ny√°ban"
            except Exception:
                self.logger.warning(f"‚ö†Ô∏è JSON parse hiba. AI v√°lasz: {resp}")
                if "IGEN" in resp.upper():
                    relevans = "IGEN"
                    pontszam = 80
                    indok = "Automatikus elfogad√°s JSON hiba miatt"
                else:
                    relevans = "NEM"
                    pontszam = 30
                    indok = "Automatikus elutas√≠t√°s JSON hiba miatt"

            item["AI_Validacio"] = relevans
            item["AI_Pontszam"] = pontszam
            item["AI_Indoklas"] = indok
            item["AI_Statusz"] = "Elfogadva" if (relevans == "IGEN" and pontszam >= 60) else "Elutas√≠tva_AI_alapjan"

            self.logger.info(f"ü§ñ AI: {nev} ‚Üí {relevans} ({pontszam}) - {indok}")
            return item

        except Exception as e:
            # ‚úÖ √öJDONS√ÅG: Fallback √©rt√©kek, hogy az elem NE vesszen el
            self.logger.error(f"‚ö†Ô∏è AI valid√°ci√≥s hiba: {e}")
            item["AI_Validacio"] = "HIBA"
            item["AI_Pontszam"] = 0
            item["AI_Indoklas"] = "AI nem el√©rhet≈ë (fallback)"
            item["AI_Statusz"] = "AI_hiba"
            return item


class ExcelPipeline:
    """Egyetlen Excel pipeline ‚Äì minden √°ruh√°z √©s minden term√©k EGY t√°bl√°ban.
       Garant√°ljuk: minden INPUT √ó √ÅRUH√ÅZ kombin√°ci√≥ legal√°bb egy sor (NINCS_TALALAT, ha semmi sem j√∂tt)."""

    # √Åruh√°zn√©v normaliz√°l√≥ (spider.name ‚Üí sz√©pen √≠rt √°ruh√°zn√©v)
    STORE_NAME_MAP = {
        "bauhaus": "Bauhaus",
        "obi": "OBI",
        "praktiker": "Praktiker",
    }

    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")

        # ‚úÖ √öJDONS√ÅG: Glob√°lis gy≈±jt≈ë az √ñSSZES sorhoz (nem √°ruh√°zank√©nt k√ºl√∂n)
        self.rows = []

        # ‚úÖ √öJDONS√ÅG: V√°rhat√≥ √©s t√©nylegesen tal√°lt kombin√°ci√≥k (store, term)
        self.expected_combos = set()
        self.found_combos = set()

        # ‚úÖ √öJDONS√ÅG: Nyitott spider p√©ld√°nyok sz√°mol√°sa ‚Äì a v√©g√©n egyszer √≠runk Excel-t
        self.open_spider_count = 0

    @classmethod
    def from_crawler(cls, crawler):
        pipeline = cls()
        crawler.signals.connect(pipeline.spider_opened, signal=signals.spider_opened)
        crawler.signals.connect(pipeline.spider_closed, signal=signals.spider_closed)
        return pipeline

    def _store_name(self, spider) -> str:
        """Spider azonos√≠t√≥b√≥l sz√©p √°ruh√°zn√©v."""
        return self.STORE_NAME_MAP.get(getattr(spider, "name", "").lower(), getattr(spider, "name", "Ismeretlen"))

    def spider_opened(self, spider):
        self.open_spider_count += 1
        store = self._store_name(spider)
        term = getattr(spider, "termek", "").strip()
        if term:
            # ‚úÖ √öJDONS√ÅG: minden spider p√©ld√°ny 1 input term√©khez tartozik ‚Üí v√°rjuk ezt a kombin√°ci√≥t
            self.expected_combos.add((store, term))
        self.logger.info(f"üìñ Spider elindult: {spider.name} | √Åruh√°z: {store} | Term√©k: '{term}'")

    def process_item(self, item, spider):
        # Normaliz√°lt mez≈ëk
        aruhaz = item.get("aruhaz") or self._store_name(spider)
        termek = (item.get("termek") or getattr(spider, "termek", "")).strip()
        nev = item.get("nev", "").strip()
        ar = str(item.get("ar", "")).strip()
        url = item.get("url", "")

        # ‚úÖ √öJDONS√ÅG: Jegyezz√ºk, hogy erre a (store, term) kombin√°ci√≥ra volt tal√°lat
        if aruhaz and termek:
            self.found_combos.add((aruhaz, termek))

        excel_item = {
            "aruhaz": aruhaz,
            "termek": termek,
            "nev": nev,
            "ar": ar,
            "url": url,
            "AI_Validacio": item.get("AI_Validacio", "N/A"),
            "AI_Pontszam": item.get("AI_Pontszam", 0),
            "AI_Indoklas": item.get("AI_Indoklas", "N/A"),
            "AI_Statusz": item.get("AI_Statusz", "N/A"),
        }

        # Csak akkor √©rdemes hozz√°adni, ha van n√©v VAGY szeretn√©nk nyers sorokat is t√°rolni
        if excel_item["nev"] or excel_item["url"] or excel_item["ar"]:
            self.rows.append(excel_item)
            self.logger.info(f"‚úÖ Sor hozz√°adva: [{aruhaz}] {termek} ‚Üí {nev[:60]}")

        return item

    def _append_no_result_row(self, store: str, term: str):
        """‚úÖ √öJDONS√ÅG: 'NINCS TAL√ÅLAT' sor lerak√°sa az adott (store, term) kombin√°ci√≥ra."""
        row = {
            "aruhaz": store,
            "termek": term,
            "nev": "NINCS_TALALAT",
            "ar": "-",
            "url": "-",
            "AI_Validacio": "-",
            "AI_Pontszam": 0,
            "AI_Indoklas": "Nincs tal√°lat",
            "AI_Statusz": "Nincs tal√°lat",
        }
        self.rows.append(row)
        self.logger.info(f"‚ÑπÔ∏è 'NINCS TAL√ÅLAT' sor besz√∫rva: [{store}] {term}")

    def spider_closed(self, spider):
        """Spider bez√°r√°sakor ellen≈ërizz√ºk az adott (store, term) kombin√°ci√≥t.
           Ha nem volt tal√°lat, besz√∫rjuk a 'NINCS TAL√ÅLAT' sort.
           Az UTOLS√ì spider lez√°r√°sakor √≠rjuk ki az EGYETLEN Excel f√°jlt."""
        store = self._store_name(spider)
        term = getattr(spider, "termek", "").strip()

        self.logger.info(f"üèÅ Spider bez√°rult: {spider.name} | √Åruh√°z: {store} | Term√©k: '{term}'")

        # ‚úÖ √öJDONS√ÅG: Ha ezt a kombin√°ci√≥t v√°rtuk, de nem volt tal√°lat ‚Üí 'NINCS TAL√ÅLAT'
        if term and (store, term) in self.expected_combos and (store, term) not in self.found_combos:
            self._append_no_result_row(store, term)

        # Ha ez volt az utols√≥ spider ‚Üí √≠rjuk ki az Excel-t
        self.open_spider_count -= 1
        if self.open_spider_count <= 0:
            self._write_single_excel()

    # ‚úÖ √öJDONS√ÅG: Egyetlen Excel √≠r√°sa a fut√°s v√©g√©n
    def _write_single_excel(self):
        if not self.rows:
            self.logger.warning("‚ö†Ô∏è Nincs adat az Excel f√°jlhoz. √úres f√°jl nem k√©sz√ºl.")
            return

        try:
            output_file = f"output_ARKERESO_{self.timestamp}.xlsx"

            # DataFrame l√©trehoz√°s
            df = pd.DataFrame(self.rows, columns=[
                "aruhaz",
                "termek",
                "nev",
                "ar",
                "url",
                "AI_Validacio",
                "AI_Pontszam",
                "AI_Indoklas",
                "AI_Statusz",
            ])

            # üîé Rendez√©s: √°ruh√°z ‚Üí termek ‚Üí AI st√°tusz (Elfogadva el≈ëre)
            status_order = {"Elfogadva": 0, "Elutas√≠tva_AI_alapjan": 1, "AI_hiba": 2, "KIKAPCSOLVA": 3, "Nincs tal√°lat": 4, "N/A": 5}
            df["__status_sort"] = df["AI_Statusz"].map(status_order).fillna(99).astype(int)
            df.sort_values(by=["aruhaz", "termek", "__status_sort", "nev"], inplace=True, kind="stable")
            df.drop(columns=["__status_sort"], inplace=True)

            # √çr√°s Excel-be
            df.to_excel(output_file, index=False)

            # Statisztika (log)
            self.logger.info(f"üéâ {len(df)} sor mentve a k√∂z√∂s Excel f√°jlba: {output_file}")

            # R√∂vid √∂sszes√≠t≈ë
            try:
                summary = df.groupby(["aruhaz", "termek"]).size().to_dict()
                self.logger.info("üìä Sorok sz√°ma √°ruh√°z √ó termek bont√°sban:")
                for (store, term), cnt in summary.items():
                    self.logger.info(f"   - {store} | {term}: {cnt} sor")
            except Exception as e_stats:
                self.logger.warning(f"Statisztika k√©sz√≠t√©s hiba: {e_stats}")

        except Exception as e:
            self.logger.error(f"‚ùå Excel √≠r√°si hiba: {e}", exc_info=True)
